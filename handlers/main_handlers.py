from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, KeyboardButton
from aiogram import Router, types
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from keyboards.third_question_keyboard import keyboard_for_third_question, \
    get_question, get_list_check
from lexicon.lexicon import LEXICON_RU
from keyboards.main_menu import remove_one_genre, get_fourth_question, get_first_keyboard, get_first_answers, get_start_kb
from list_films.movie_alg import recommend_movies

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'], reply_markup=get_start_kb())


# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ–æ–±—â–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ñ–∏–ª—å–º\n\n'
             '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ - '
             '–Ω–∞–ø–∏—à–∏—Ç–µ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º', reply_markup=get_start_kb()
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ñ–∏–ª—å–º\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ - '
             '–Ω–∞–ø–∏—à–∏—Ç–µ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º', reply_markup=get_start_kb()
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


class UserChoices(StatesGroup):
    choice_1 = State()
    choice_2 = State()
    choice_3 = State()
    choice_4 = State()


@router.message(F.text.in_(['–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']))
async def start_choices(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä:", reply_markup=get_first_keyboard(),
                         resize_keyboard=True,
                         )
    await state.set_state(UserChoices.choice_1)


@router.message(StateFilter(UserChoices.choice_1))
async def handle_choice_1(message: types.Message, state: FSMContext):
    if message.text not in get_first_answers():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(choice_1=message.text)
    data = await state.get_data()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä:", reply_markup=remove_one_genre(data['choice_1']), resize_keyboard=True)
    await state.set_state(UserChoices.choice_2)


@router.message(StateFilter(UserChoices.choice_2))
async def handle_choice_2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    listik_three = ['–î—Ä–∞–º–∞', '–ö–æ–º–µ–¥–∏—è', '–ë–æ–µ–≤–∏–∫ (–≠–∫—à–µ–Ω)', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–¢—Ä–∏–ª–ª–µ—Ä', '–§—ç–Ω—Ç–µ–∑–∏', '–ú–µ–ª–æ–¥—Ä–∞–º–∞', '–£–∂–∞—Å—ã',
                    '–î–µ—Ç–µ–∫—Ç–∏–≤',
                    '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–ö—Ä–∏–º–∏–Ω–∞–ª', '–í–æ–µ–Ω–Ω—ã–π', '–°–µ–º–µ–π–Ω—ã–π', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–î—Ä—É–≥–æ–µ']
    spisok = listik_three.copy()
    spisok.remove(data['choice_1'])
    print(spisok)
    if message.text not in spisok:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(choice_2=message.text)
    await message.answer(f"{get_question(data['choice_1'])}",
                         reply_markup=keyboard_for_third_question(data['choice_1']),
                         resize_keyboard=True)
    await state.set_state(UserChoices.choice_3)


@router.message(StateFilter(UserChoices.choice_3))
async def handle_choice_3(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text not in get_list_check(data['choice_1']):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(choice_3=message.text)
    await message.answer("–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥:", reply_markup=get_fourth_question(), resize_keyboard=True)
    await state.set_state(UserChoices.choice_4)


@router.message(StateFilter(UserChoices.choice_4))
async def handle_choice_4(message: types.Message, state: FSMContext):
    arr = ['üï∞Ô∏è –ö–ª–∞—Å—Å–∏–∫–∞ (–¥–æ 2000 –≥–æ–¥–∞)', 'üé• –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–∏–Ω–æ (2000‚Äì2020)', '‚≠ê –ù–æ–≤–∏–Ω–∫–∏ (2020‚Äì2025)',
           'ü§∑ –ù–µ–≤–∞–∂–Ω–æ, —Ö–æ—á—É —Å—é—Ä–ø—Ä–∏–∑!']
    if message.text not in arr:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(choice_4=message.text)
    data = await state.get_data()
    recommended = recommend_movies([data['choice_1'], data['choice_2'], data['choice_3'], data['choice_4']])
    movie_list = "\n".join([f"üé¨ {movie}" for movie in recommended])
    response_text = (
        f"üéâ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥–æ–π–¥—É—Ç:\n\n"
        f"{movie_list}\n\n"
        "üçø –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º!"
    )
    await message.answer(text=response_text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')]], resize_keyboard=True, )
    await message.answer("–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=keyboard)


@router.message(F.text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
async def start_over(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–æ–≤–∞!", reply_markup=get_start_kb())
    await start_choices(message)
